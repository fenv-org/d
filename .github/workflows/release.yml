name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v*.*.*

jobs:
  release:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          # - windows-latest

    runs-on: ubuntu-latest

    steps:
      - name: Set up repository
        uses: actions/checkout@v3

      - name: Get `deno` version
        id: get_deno_version
        run: echo "deno_version=$(cat .dvmrc)" >> $GITHUB_OUTPUT

      - name: Show `deno` version
        run: echo ${{ steps.get_deno_version.outputs.deno_version }}

      - name: Set up `deno`
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ steps.get_deno_version.outputs.deno_version }}

      - name: Set the release version
        id: set_release_version
        run: |
          version="$(echo "${{ github.ref }}" | xargs basename)"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Show release version
        run: echo ${{ steps.set_release_version.outputs.version }}

      - name: Update 'lib/version/src/version.ts'
        run: |
          # remove the leading "v" from "steps.set_release_version.outputs.version"
          # and set the result to "version"
          version="$(echo "${{ steps.set_release_version.outputs.version }}" | sed 's/^v//')"
          echo "export const VERSION_STRING = '$version'" > lib/version/src/version.ts

      - name: Get `flutter` version
        id: get_flutter_version
        run: echo "flutter_version=$(cat test-sample/.flutter-version)" >> $GITHUB_OUTPUT

      - name: Set up `flutter`
        uses: flutter-actions/setup-flutter@v2
        with:
          channel: stable
          version: ${{ steps.get_flutter_version.outputs.flutter_version }}
          cache: true
          cache-key: flutter

      - name: Run tests
        run: deno task testAll

      - name: Bundle `main.ts`
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: deno task build

      - name: Release
        uses: softprops/action-gh-release@v1
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          files: |
            build/main.js
            .dvmrc
          tag_name: ${{ steps.set_release_version.outputs.version }}
          generate_release_notes: true
          body: |
            Release ${{ steps.set_release_version.outputs.version }}
          draft: false
          prerelease: true
