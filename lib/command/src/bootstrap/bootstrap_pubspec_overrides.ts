import { DartProject, DependencyGraph, PubspecOverridesYaml } from 'dart/mod.ts'
import { std } from 'deps.ts'
import { LINE_FEED } from 'util/mod.ts'
import { Workspace } from 'workspace/mod.ts'

/**
 * Writes `pubspec_overrides.yaml` files for all dart projects in the given
 * {@link workspace}.
 *
 * We records the transitive dependencies of each managed dart project and
 * dart packages in `dependency_overrides` section of the original
 * `pubspec.yaml`.
 */
export async function writePubspecOverridesYamlFiles(
  workspace: Workspace,
  dependencyGraph: DependencyGraph,
): Promise<void> {
  const transitiveDependenciesTable = makeTransitiveDependenciesTable(
    dependencyGraph,
  )
  await Promise.all(
    workspace.dartProjects.map(async (dartProject) => {
      const dependencies = transitiveDependenciesTable[dartProject.name] ?? []
      await writePubspecOverridesYamlFile(dartProject, [...dependencies])
    }),
  )
}

function makeTransitiveDependenciesTable(
  dependencyGraph: DependencyGraph,
): Record<string, Set<DartProject>> {
  const table: Record<string, Set<DartProject>> = {}
  for (const dartProject of dependencyGraph.projects) {
    table[dartProject.name] = new Set()
  }
  for (const dartProject of dependencyGraph.projects) {
    const dependents = dependencyGraph.dependentsOf(dartProject)
    for (const dependent of dependents) {
      table[dependent.name].add(dartProject)
      for (const transitiveDependency of table[dartProject.name]) {
        table[dependent.name].add(transitiveDependency)
      }
    }
  }
  return table
}

async function writePubspecOverridesYamlFile(
  dartProject: DartProject,
  dependencies: readonly DartProject[],
): Promise<void> {
  const overrides = pubspecOverrideOf(dartProject, dependencies)
  const overridesFilepath = std.path.join(
    dartProject.path,
    'pubspec_overrides.yaml',
  )
  if (!overrides) {
    if (await std.fs.exists(overridesFilepath)) {
      await Deno.remove(overridesFilepath)
    }
    return
  }

  const fileContents = [
    '# This file is automatically generated by `d` CLI.',
    '# Please do not edit this file manually.',
    '',
    ...std.yaml.stringify(overrides as Record<string, unknown>).split('\n'),
  ]

  await Deno.writeTextFile(overridesFilepath, fileContents.join(LINE_FEED))
}

function pubspecOverrideOf(
  dartProject: DartProject,
  dependencies: readonly DartProject[],
): PubspecOverridesYaml | undefined {
  if (dependencies.length === 0) {
    return undefined
  }

  const overridesYaml = {
    dependency_overrides: {
      ...dartProject.pubspec?.dependency_overrides,
    },
  }

  for (const dependency of dependencies) {
    overridesYaml.dependency_overrides[dependency.name] = {
      path: std.path.relative(
        dartProject.path,
        dependency.path,
      ),
    }
  }

  // Returns the overrides yaml sorted in alphabetical order.
  return {
    dependency_overrides: {
      ...Object.fromEntries(
        Object.entries(overridesYaml.dependency_overrides).sort(),
      ),
    },
  }
}
